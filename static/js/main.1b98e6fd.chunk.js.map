{"version":3,"sources":["api/users.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","api/todos.ts","index.tsx"],"names":["id","name","username","email","UserInfo","user","className","href","TodoInfo","todo","toString","completed","title","TodoList","todos","map","findUsers","userId","usersFromServer","find","dataList","App","useState","currentData","setCurrentData","setTitle","currennUserId","setCurrentUserId","titleValid","setTitleValid","selectValid","setSelectValid","getTodoIds","getNewId","Math","max","onSubmit","event","preventDefault","newTodo","prevData","action","method","placeholder","value","onChange","target","type","disabled","ReactDOM","render","document","getElementById"],"mappings":"qNAAe,GACb,CACEA,GAAI,EACJC,KAAM,gBACNC,SAAU,OACVC,MAAO,qBAET,CACEH,GAAI,EACJC,KAAM,eACNC,SAAU,YACVC,MAAO,qBAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,WACVC,MAAO,sBAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,WACVC,MAAO,6BAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,SACVC,MAAO,4BAET,CACEH,GAAI,EACJC,KAAM,uBACNC,SAAU,mBACVC,MAAO,2BAET,CACEH,GAAI,EACJC,KAAM,kBACNC,SAAU,eACVC,MAAO,0BAET,CACEH,GAAI,EACJC,KAAM,2BACNC,SAAU,gBACVC,MAAO,wBAET,CACEH,GAAI,EACJC,KAAM,kBACNC,SAAU,WACVC,MAAO,2BAET,CACEH,GAAI,GACJC,KAAM,qBACNC,SAAU,iBACVC,MAAO,2B,OCrDEC,EAA4B,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAC1C,OACE,mBAAGC,UAAU,WAAWC,KAAI,wBAAYF,QAAZ,IAAYA,OAAZ,EAAYA,EAAMF,OAA9C,gBACGE,QADH,IACGA,OADH,EACGA,EAAMJ,QCHAO,EAA4B,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAC1C,OACE,0BAEE,UAASA,EAAKT,GAAGU,WACjBJ,UAAS,mBAAcG,EAAKE,WAAa,uBAH3C,UAKE,oBAAIL,UAAU,kBAAd,SAAiCG,EAAKG,QAErCH,EAAKJ,MAAQ,cAAC,EAAD,CAAUA,KAAMI,EAAKJ,SAN9BI,EAAKT,KCFHa,EAA4B,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAC1C,OACE,mCACGA,EAAMC,KAAI,SAACN,GAAD,OACT,cAAC,EAAD,CAAwBA,KAAMA,GAAfA,EAAKT,UCH5B,SAASgB,EAAUC,GACjB,OAAOC,EAAgBC,MAAK,SAACd,GAAD,OAAUA,EAAKL,KAAOiB,MAAW,KAG/D,IAAMG,ECZS,CACb,CACEpB,GAAI,EACJY,MAAO,qBACPD,WAAW,EACXM,OAAQ,GAEV,CACEjB,GAAI,GACJY,MAAO,kBACPD,WAAW,EACXM,OAAQ,GAEV,CACEjB,GAAI,EACJY,MAAO,qCACPD,WAAW,EACXM,OAAQ,IDLqBF,KAAI,SAACN,GACpC,OAAO,2BACFA,GADL,IAEEJ,KAAMW,EAAUP,EAAKQ,aAIZI,EAAM,WACjB,MAAsCC,mBAAyBF,GAA/D,mBAAOG,EAAP,KAAoBC,EAApB,KACA,EAA0BF,mBAAS,IAAnC,mBAAOV,EAAP,KAAca,EAAd,KACA,EAA0CH,mBAAS,GAAnD,mBAAOI,EAAP,KAAsBC,EAAtB,KAEA,EAAoCL,oBAAS,GAA7C,mBAAOM,EAAP,KAAmBC,EAAnB,KACA,EAAsCP,oBAAS,GAA/C,mBAAOQ,EAAP,KAAoBC,EAApB,KAEMC,EAAaT,EAAYR,KAAI,SAACN,GAAD,OAAUA,EAAKT,MAC5CiC,EAAWC,KAAKC,IAAL,MAAAD,KAAI,YAAQF,IAAc,EA0C3C,OACE,sBAAK1B,UAAU,MAAf,UACE,+CAEA,uBAAM8B,SArCY,SAACC,GACrBA,EAAMC,iBAEN,IAAMC,EAAwB,CAC5BvC,GAAIiC,EACJtB,WAAW,EACXC,QACAK,OAAQS,EACRrB,KAAMW,EAAUU,IAGbd,GACHiB,GAAc,GAGXH,GACHK,GAAe,GAGbnB,GAASc,IACXF,GAAe,SAACgB,GAAD,4BAAkBA,GAAlB,CAA4BD,OA1B7Cd,EAAS,IACTE,EAAiB,GACjBE,GAAc,GACdE,GAAe,KAwCkBU,OAAO,aAAaC,OAAO,OAA1D,UACE,sBAAKpC,UAAU,QAAf,UACE,kCACG,UACD,uBACEqC,YAAY,gBACZC,MAAOhC,EACPiC,SAAU,SAACR,GACTZ,EAASY,EAAMS,OAAOF,OAElBhB,GACFC,GAAc,IAGlBkB,KAAK,OACL,UAAQ,kBAGXnB,GAAc,sBAAMtB,UAAU,QAAhB,qCAGjB,sBAAKA,UAAU,QAAf,UACE,kCACG,SACD,yBACEsC,MAAOlB,EACPmB,SAtCc,SAACR,GACrBP,GACFC,GAAe,GAGjBJ,GAAkBU,EAAMS,OAAOF,QAkCrB,UAAQ,aAHV,UAKE,wBAAQA,MAAM,IAAII,UAAQ,EAA1B,2BAGC9B,EAAgBH,KAAI,SAACV,GAAD,OACnB,wBAAsBuC,MAAOvC,EAAKL,GAAlC,SACGK,EAAKJ,MADKI,EAAKL,aAMvB8B,GAAe,sBAAMxB,UAAU,QAAhB,qCAGlB,wBAAQyC,KAAK,SAAS,UAAQ,eAA9B,oBAKF,yBAASzC,UAAU,WAAnB,SACE,cAAC,EAAD,CAAUQ,MAAOS,UEvHzB0B,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.1b98e6fd.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import { User } from '../../types/UsersType';\n\ntype Props = {\n  user: User;\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  return (\n    <a className=\"UserInfo\" href={`mailto:${user?.email}`}>\n      {user?.name}\n    </a>\n  );\n};\n","import { TodoWithUser } from '../../types/TodoType';\nimport { UserInfo } from '../UserInfo';\n\ntype Props = {\n  todo: TodoWithUser;\n};\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  return (\n    <article\n      key={todo.id}\n      data-id={todo.id.toString()}\n      className={`TodoInfo ${todo.completed && 'TodoInfo--completed'}`}\n    >\n      <h2 className=\"TodoInfo__title\">{todo.title}</h2>\n\n      {todo.user && <UserInfo user={todo.user} />}\n    </article>\n  );\n};\n","import { TodoWithUser } from '../../types/TodoType';\nimport { TodoInfo } from '../TodoInfo';\n\ntype Props = {\n  todos: TodoWithUser[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <>\n      {todos.map((todo: TodoWithUser) => (\n        <TodoInfo key={todo.id} todo={todo} />\n      ))}\n    </>\n  );\n};\n","import './App.scss';\n\nimport { useState } from 'react';\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { TodoList } from './components/TodoList';\nimport { TodoWithUser } from './types/TodoType';\n\nfunction findUsers(userId: number) {\n  return usersFromServer.find((user) => user.id === userId) || null;\n}\n\nconst dataList = todosFromServer.map((todo) => {\n  return {\n    ...todo,\n    user: findUsers(todo.userId),\n  };\n});\n\nexport const App = () => {\n  const [currentData, setCurrentData] = useState<TodoWithUser[]>(dataList);\n  const [title, setTitle] = useState('');\n  const [currennUserId, setCurrentUserId] = useState(0);\n\n  const [titleValid, setTitleValid] = useState(false);\n  const [selectValid, setSelectValid] = useState(false);\n\n  const getTodoIds = currentData.map((todo) => todo.id);\n  const getNewId = Math.max(...getTodoIds) + 1;\n\n  function clear() {\n    setTitle('');\n    setCurrentUserId(0);\n    setTitleValid(false);\n    setSelectValid(false);\n  }\n\n  const handlerSubmit = (event: React.ChangeEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const newTodo: TodoWithUser = {\n      id: getNewId,\n      completed: false,\n      title,\n      userId: currennUserId,\n      user: findUsers(currennUserId),\n    };\n\n    if (!title) {\n      setTitleValid(true);\n    }\n\n    if (!currennUserId) {\n      setSelectValid(true);\n    }\n\n    if (title && currennUserId) {\n      setCurrentData((prevData) => [...prevData, newTodo]);\n      clear();\n    }\n  };\n\n  const handlerSelectUser = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    if (selectValid) {\n      setSelectValid(false);\n    }\n\n    setCurrentUserId(+event.target.value);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form onSubmit={handlerSubmit} action=\"/api/todos\" method=\"POST\">\n        <div className=\"field\">\n          <label>\n            {'Title: '}\n            <input\n              placeholder=\"Enter a title\"\n              value={title}\n              onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                setTitle(event.target.value);\n\n                if (titleValid) {\n                  setTitleValid(false);\n                }\n              }}\n              type=\"text\"\n              data-cy=\"titleInput\"\n            />\n          </label>\n          {titleValid && <span className=\"error\">Please enter a title</span>}\n        </div>\n\n        <div className=\"field\">\n          <label>\n            {'User: '}\n            <select\n              value={currennUserId}\n              onChange={handlerSelectUser}\n              data-cy=\"userSelect\"\n            >\n              <option value=\"0\" disabled>\n                Choose a user\n              </option>\n              {usersFromServer.map((user) => (\n                <option key={user.id} value={user.id}>\n                  {user.name}\n                </option>\n              ))}\n            </select>\n          </label>\n          {selectValid && <span className=\"error\">Please choose a user</span>}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <section className=\"TodoList\">\n        <TodoList todos={currentData} />\n      </section>\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}